console.log("los comandos de VIDEO Y AUDIO se INICIAN");

const tieneSoporteUserMedia = () => !!(navigator.getUserMedia || navigator.mozGetUserMedia || navigator.mediaDevices.getUserMedia || navigator.webkitGetUserMedia || navigator.msGetUserMedia),
    _getUserMedia = (...arguments) => (navigator.getUserMedia || navigator.mozGetUserMedia || navigator.mediaDevices.getUserMedia || navigator.webkitGetUserMedia || navigator.msGetUserMedia).apply(navigator, arguments),
    mostrarStream = idDeDispositivo => {
        _getUserMedia({
            video: {
                deviceId: idDeDispositivo
            }
        }, streamObtenido => {
            llenarSelectConDispositivosDisponibles(), $listaDeDispositivos.onchange = () => {
                stream && stream.getTracks().forEach((function (track) {
                    track.stop()
                })), mostrarStream($listaDeDispositivos.value)
            }, stream = streamObtenido, $video.srcObject = stream, $video.play()
        }, error => {
            console.log("Permiso denegado o error: ", error), $estado.innerHTML = "No se puede acceder a la cÃ¡mara, o no diste permiso."
        })
    };
sr.onend = () => {
    sr.start()
}, sr.start();
var sr = new webkitSpeechRecognition;
const $texto = document.querySelector("#texto");
sr.onresult = resultado => {
    var indiceUltimoElemento = resultado.results.length - 1,
        textoEscuchado = resultado.results[indiceUltimoElemento][0].transcript;
    $texto.innerHTML += "<br>" + textoEscuchado
}, sr.onend = () => {
    sr.start()
}, sr.start();
const obtenerDispositivos = () => navigator.mediaDevices.enumerateDevices(),
    llenarSelectConDispositivosDisponibles = () => {
        limpiarSelect(), obtenerDispositivos().then(dispositivos => {
            const dispositivosDeVideo = [];
            dispositivos.forEach(dispositivo => {
                const tipo = dispositivo.kind;
                "videoinput" === tipo && dispositivosDeVideo.push(dispositivo)
            }), dispositivosDeVideo.length > 0 && dispositivosDeVideo.forEach(dispositivo => {
                const option = document.createElement("option");
                option.value = dispositivo.deviceId, option.text = dispositivo.label, $listaDeDispositivos.appendChild(option)
            })
        })
    };
$boton.addEventListener("click", (function () {
    $video.pause();
    var contexto = $canvas.getContext("2d");
    $canvas.width = $video.videoWidth, $canvas.height = $video.videoHeight, contexto.drawImage($video, 0, 0, $canvas.width, $canvas.height);
    var foto = $canvas.toDataURL(),
        enlace = document.createElement("a");
    enlace.download = "assets/img/fondokuvawt0.png", enlace.href = foto, enlace.click(), $video.play()
}));
console.log("los comandos de VIDEO Y AUDIO se han cargado CORRECTAMENTE");